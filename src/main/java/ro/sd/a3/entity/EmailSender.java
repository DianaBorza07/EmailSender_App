package ro.sd.a3.entity;


import org.springframework.stereotype.Repository;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Properties;

import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

@Repository
public class EmailSender {

    static public void sendConfirmationEmail(String toAddress,int option, PayloadDTO payloadDTO){

        String fromAddress = "confirmation@randevular.com";

        final String username = "25b0b37b125724";//username generated by Mailtrap
        final String password = "ae16f82f170c90";//password generated by Mailtrap

        String host = "smtp.mailtrap.io";

        Properties properties = new Properties();
        properties.put("mail.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");
        properties.put("mail.smtp.host", host);
        properties.put("mail.smtp.port", "465");

        Session session = Session.getInstance(properties,
                new javax.mail.Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(username, password);
                    }
                });

        try {
            Message message = new MimeMessage(session);

            message.setFrom(new InternetAddress(fromAddress));

            message.setRecipients(Message.RecipientType.TO,
                    InternetAddress.parse(toAddress));



            if(option == 1) {
                message.setSubject("Registration Confirmation");
                message.setContent(generateWelcomeMessage(), "text/html; charset=utf-8");
            }
            if( option == 2) {
                message.setSubject("Appointment Confirmation");
                message.setContent(generateAppointmentMessage(payloadDTO), "text/html; charset=utf-8");
            }
            Transport.send(message);

            System.out.println("Message sent successfully!");

        } catch (MessagingException e) {
            throw new RuntimeException(e);
        }
    }

    static private String generateWelcomeMessage(){
        StringBuilder contentBuilder = new StringBuilder();
        try {
            BufferedReader in = new BufferedReader(new FileReader("src/main/resources/static/emailTemplate.html"));
            String str;
            while ((str = in.readLine()) != null) {
                contentBuilder.append(str);
            }
            in.close();
        } catch (IOException e) {
        }
        String content = contentBuilder.toString();
        return content;
    }

    static private String generateAppointmentMessage(PayloadDTO payloadDTO){
        StringBuilder contentBuilder = new StringBuilder();
        try {
            BufferedReader in = new BufferedReader(new FileReader("src/main/resources/static/confirmationTemplate.html"));
            String str;
            while ((str = in.readLine()) != null) {
                contentBuilder.append(str);
            }
            in.close();
        } catch (IOException e) {
        }
        String content = contentBuilder.toString();
        content = content.replace("CURRENT_DATE", LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
        content = content.replace("#NAME",payloadDTO.getName());
        content = content.replace("#DATE",payloadDTO.getDate());
        content = content.replace("#BEAUTY_SALON",payloadDTO.getBeautySalon());
        content = content.replace("#SERVICE",payloadDTO.getSalonService());
        content = content.replace("PRICE", String.valueOf(payloadDTO.getPrice()));
        return content;
    }



}
